
1. TodoItemFormatter Sınıfı:
- Bu sınıf, To-Do öğelerinin görevini, son tarihini ve durumunu biçimlendirmek için kullanılan metodları içerir.
- `formatTask(task)`, `formatDueDate(dueDate)` ve `formatStatus(completed)` metodları, görevlerin metinsel biçimini düzenler.

2. TodoManager Sınıfı:
- Bu sınıf, To-Do öğelerini yönetmekten sorumludur ve öğeleri eklemek, düzenlemek, silmek, durumunu değiştirmek, filtrelemek ve yerel depolamaya kaydetmek gibi işlevlere sahiptir.
- `addTodo(task, dueDate)`, `editTodo(id, updatedTask)`, `deleteTodo(id)`, `toggleTodoStatus(id)`, `clearAllTodos()`, `filterTodos(status)`, `getRandomId()` ve `saveToLocalStorage()` gibi metodları içerir.

3. UIManager Sınıfı:
- Bu sınıf, kullanıcı arayüzünü yönetir ve olayları ele alır. Yeni görev eklemek, tüm görevleri silmek, görev durumunu değiştirmek ve filtrelemek gibi işlevleri içerir.
- `addEventListeners()`, `handleAddTodo()`, `handleClearAllTodos()`, `showAllTodos()`, `displayTodos(todos)`, `handleEditTodo(id)`, `handleToggleStatus(id)`, `handleDeleteTodo(id)`, `handleFilterTodos(status)` ve `showAlertMessage(message, type)` gibi metodları içerir.
- Olay dinleyicilerini eklerken, buton tıklamaları ve tuş vuruşları gibi farklı kullanıcı etkileşimlerini ele almak için kullanılır.

4. ThemeSwitcher Sınıfı:
- Bu sınıf, temayı yönetir ve kullanıcı arayüzündeki tema değişikliklerini işler.
- `init()`, `add ThemeSwitcher sınıfının detaylı açıklaması:

- `init()`: Bu metot, tema değiştiricinin başlatılmasını sağlar. Öncelikle localStorage'dan kaydedilmiş tema bilgisini alır. Ardından `addThemeEventListeners()` metotunu çağırarak tema değiştirme butonlarına olay dinleyicilerini ekler.

- `addThemeEventListeners()`: Bu metot, tema değiştirme butonlarına tıklama olaylarını dinler. Her bir tema değiştirme butonuna tıklandığında, ilgili temayı ayarlamak için `setTheme(themeName)` metotunu çağırır ve seçilen temayı localStorage'a kaydetmek için `saveThemeToLocalStorage(themeName)` metotunu çağırır.

- `setTheme(themeName)`: Bu metot, belirli bir tema adını alarak sayfa HTML elementinde `data-theme` özniteliğini ayarlar. Bu sayede sayfa teması değiştirilmiş olur.

- `saveThemeToLocalStorage(themeName)`: Bu metot, kullanıcının seçtiği temasını localStorage'a kaydederek sonraki ziyaretlerde uygulamaya seçtiği temayı hatırlamayı sağlar.

- `getThemeFromLocalStorage()`: Bu metot, localStorage'dan kaydedilmiş temayı geri döndürür. Eğer herhangi bir tema kaydedilmemişse, null değerini döndürür.

Temaların dolaşılarak olay dinleyicilerinin eklenmesi, temanın ayarlanması ve localStorage'da temanın saklanması gibi işlemler ThemeSwitcher sınıfı tarafından yönetilir. Bu sayede kullanıcının tercih ettiği tema uygulama her yüklendiğinde hatırlanır ve temanın değiştirilmesi kolaylaşır.

Tabii ki! İşte To-Do List uygulaması için JavaScript kodunun detaylı açıklaması İngilizce olarak: